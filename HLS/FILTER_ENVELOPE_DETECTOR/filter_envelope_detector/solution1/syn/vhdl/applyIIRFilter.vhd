-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity applyIIRFilter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of applyIIRFilter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "applyIIRFilter_applyIIRFilter,hls_ip_2022_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.025929,HLS_SYN_LAT=29,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1920,HLS_SYN_LUT=739,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln16_reg_409 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal NUM_1_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal NUM_1_0_ce0 : STD_LOGIC;
    signal NUM_1_0_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal delay_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal delay_ce0 : STD_LOGIC;
    signal delay_we0 : STD_LOGIC;
    signal delay_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal delay_ce1 : STD_LOGIC;
    signal delay_we1 : STD_LOGIC;
    signal delay_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal NUM_1_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal NUM_1_1_ce0 : STD_LOGIC;
    signal NUM_1_1_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal NUM_1_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal NUM_1_2_ce0 : STD_LOGIC;
    signal NUM_1_2_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal DEN_1_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal DEN_1_1_ce0 : STD_LOGIC;
    signal DEN_1_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DEN_1_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal DEN_1_2_ce0 : STD_LOGIC;
    signal DEN_1_2_q0 : STD_LOGIC_VECTOR (29 downto 0);
    signal reg_181 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln16_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln21_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_418 : STD_LOGIC_VECTOR (63 downto 0);
    signal delay_addr_reg_423 : STD_LOGIC_VECTOR (4 downto 0);
    signal delay_addr_reg_423_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal delay_addr_1_reg_428 : STD_LOGIC_VECTOR (4 downto 0);
    signal delay_load_reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal NUM_1_1_load_reg_463 : STD_LOGIC_VECTOR (1 downto 0);
    signal delay_load_1_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal NUM_1_2_load_reg_473 : STD_LOGIC_VECTOR (1 downto 0);
    signal DEN_1_1_load_reg_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal DEN_1_2_load_reg_483 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln22_fu_279_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln22_reg_498 : STD_LOGIC_VECTOR (62 downto 0);
    signal y_reg_509 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln22_reg_514 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln23_fu_305_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln23_reg_519 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_315_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln23_reg_545 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln24_reg_550 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_340_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln21_reg_560 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_353_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln25_reg_565 : STD_LOGIC_VECTOR (62 downto 0);
    signal newFirst_fu_362_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal newFirst_reg_570 : STD_LOGIC_VECTOR (62 downto 0);
    signal output_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal i_cast1_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln22_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal x_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_x_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal i_fu_72 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln16_fu_247_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln21_fu_209_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_223_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln23_fu_236_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln18_1_fu_265_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_273_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln22_1_fu_282_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_289_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_273_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln23_1_fu_308_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_315_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln21_1_fu_332_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_340_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln25_fu_346_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_353_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_fu_358_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal newFirst4_fu_367_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal acc_fu_371_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_273_p00 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_289_p00 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_315_p00 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_340_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_353_p00 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_condition_247 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component applyIIRFilter_mul_31ns_32s_63_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component applyIIRFilter_mul_32s_32s_63_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component applyIIRFilter_mul_32s_31ns_63_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component applyIIRFilter_NUM_1_0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component applyIIRFilter_delay_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component applyIIRFilter_NUM_1_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component applyIIRFilter_DEN_1_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component applyIIRFilter_DEN_1_2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component applyIIRFilter_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    NUM_1_0_U : component applyIIRFilter_NUM_1_0_ROM_AUTO_1R
    generic map (
        DataWidth => 23,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => NUM_1_0_address0,
        ce0 => NUM_1_0_ce0,
        q0 => NUM_1_0_q0);

    delay_U : component applyIIRFilter_delay_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 22,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delay_address0,
        ce0 => delay_ce0,
        we0 => delay_we0,
        d0 => delay_q1,
        q0 => delay_q0,
        address1 => delay_address1,
        ce1 => delay_ce1,
        we1 => delay_we1,
        d1 => output_reg_575,
        q1 => delay_q1);

    NUM_1_1_U : component applyIIRFilter_NUM_1_1_ROM_AUTO_1R
    generic map (
        DataWidth => 2,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => NUM_1_1_address0,
        ce0 => NUM_1_1_ce0,
        q0 => NUM_1_1_q0);

    NUM_1_2_U : component applyIIRFilter_NUM_1_1_ROM_AUTO_1R
    generic map (
        DataWidth => 2,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => NUM_1_2_address0,
        ce0 => NUM_1_2_ce0,
        q0 => NUM_1_2_q0);

    DEN_1_1_U : component applyIIRFilter_DEN_1_1_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => DEN_1_1_address0,
        ce0 => DEN_1_1_ce0,
        q0 => DEN_1_1_q0);

    DEN_1_2_U : component applyIIRFilter_DEN_1_2_ROM_AUTO_1R
    generic map (
        DataWidth => 30,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => DEN_1_2_address0,
        ce0 => DEN_1_2_ce0,
        q0 => DEN_1_2_q0);

    mul_31ns_32s_63_2_1_U1 : component applyIIRFilter_mul_31ns_32s_63_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_273_p0,
        din1 => ap_sig_allocacmp_x_load,
        ce => ap_const_logic_1,
        dout => grp_fu_273_p2);

    mul_31ns_32s_63_2_1_U2 : component applyIIRFilter_mul_31ns_32s_63_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_289_p0,
        din1 => delay_load_reg_458,
        ce => ap_const_logic_1,
        dout => grp_fu_289_p2);

    mul_31ns_32s_63_2_1_U3 : component applyIIRFilter_mul_31ns_32s_63_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_315_p0,
        din1 => delay_load_1_reg_468,
        ce => ap_const_logic_1,
        dout => grp_fu_315_p2);

    mul_32s_32s_63_2_1_U4 : component applyIIRFilter_mul_32s_32s_63_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => DEN_1_1_load_reg_478,
        din1 => grp_fu_324_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_324_p2);

    mul_32s_31ns_63_2_1_U5 : component applyIIRFilter_mul_32s_31ns_63_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_reg_509,
        din1 => grp_fu_340_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_340_p2);

    mul_31ns_32s_63_2_1_U6 : component applyIIRFilter_mul_31ns_32s_63_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_353_p0,
        din1 => grp_fu_353_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_353_p2);

    flow_control_loop_pipe_U : component applyIIRFilter_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_247)) then
                if ((icmp_ln16_fu_198_p2 = ap_const_lv1_1)) then 
                    i_fu_72 <= add_ln16_fu_247_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_72 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    x_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                x_fu_68 <= input_r;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                x_fu_68 <= acc_fu_371_p2(62 downto 31);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_409 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                DEN_1_1_load_reg_478 <= DEN_1_1_q0;
                DEN_1_2_load_reg_483 <= DEN_1_2_q0;
                NUM_1_1_load_reg_463 <= NUM_1_1_q0;
                NUM_1_2_load_reg_473 <= NUM_1_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln16_fu_198_p2 = ap_const_lv1_1))) then
                    delay_addr_1_reg_428(4 downto 2) <= zext_ln23_fu_242_p1(5 - 1 downto 0)(4 downto 2);
                    delay_addr_reg_423(4 downto 2) <= zext_ln22_fu_231_p1(5 - 1 downto 0)(4 downto 2);
                    zext_ln21_reg_418(3 downto 1) <= zext_ln21_fu_215_p1(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    delay_addr_reg_423_pp0_iter1_reg(4 downto 2) <= delay_addr_reg_423(4 downto 2);
                icmp_ln16_reg_409 <= icmp_ln16_fu_198_p2;
                mul_ln23_reg_545 <= grp_fu_315_p2;
                mul_ln24_reg_550 <= grp_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_409 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                delay_load_1_reg_468 <= delay_q0;
                delay_load_reg_458 <= delay_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln21_reg_560 <= grp_fu_340_p2;
                mul_ln25_reg_565 <= grp_fu_353_p2;
                newFirst_reg_570 <= newFirst_fu_362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_409 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_ln22_reg_514 <= grp_fu_289_p2;
                sext_ln23_reg_519 <= sext_ln23_fu_305_p1;
                y_reg_509 <= grp_fu_273_p2(62 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                output_reg_575 <= acc_fu_371_p2(62 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln16_reg_409 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln16_reg_409 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_181 <= NUM_1_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_409 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                sext_ln22_reg_498 <= sext_ln22_fu_279_p1;
            end if;
        end if;
    end process;
    zext_ln21_reg_418(0) <= '1';
    zext_ln21_reg_418(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    delay_addr_reg_423(1 downto 0) <= "10";
    delay_addr_reg_423_pp0_iter1_reg(1 downto 0) <= "10";
    delay_addr_1_reg_428(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    DEN_1_1_address0 <= zext_ln21_fu_215_p1(4 - 1 downto 0);

    DEN_1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DEN_1_1_ce0 <= ap_const_logic_1;
        else 
            DEN_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    DEN_1_2_address0 <= zext_ln21_fu_215_p1(4 - 1 downto 0);

    DEN_1_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DEN_1_2_ce0 <= ap_const_logic_1;
        else 
            DEN_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    NUM_1_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, zext_ln21_reg_418, i_cast1_fu_204_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                NUM_1_0_address0 <= zext_ln21_reg_418(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                NUM_1_0_address0 <= i_cast1_fu_204_p1(4 - 1 downto 0);
            else 
                NUM_1_0_address0 <= "XXXX";
            end if;
        else 
            NUM_1_0_address0 <= "XXXX";
        end if; 
    end process;


    NUM_1_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            NUM_1_0_ce0 <= ap_const_logic_1;
        else 
            NUM_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NUM_1_1_address0 <= zext_ln21_fu_215_p1(4 - 1 downto 0);

    NUM_1_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            NUM_1_1_ce0 <= ap_const_logic_1;
        else 
            NUM_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    NUM_1_2_address0 <= zext_ln21_fu_215_p1(4 - 1 downto 0);

    NUM_1_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            NUM_1_2_ce0 <= ap_const_logic_1;
        else 
            NUM_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    acc_fu_371_p2 <= std_logic_vector(unsigned(newFirst_reg_570) + unsigned(newFirst4_fu_367_p2));
    add_ln16_fu_247_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv4_2));
    add_ln23_fu_358_p2 <= std_logic_vector(unsigned(mul_ln22_reg_514) + unsigned(mul_ln23_reg_545));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_247_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_247 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln16_reg_409)
    begin
        if (((icmp_ln16_reg_409 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= x_fu_68;

    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, i_fu_72)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_x_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, x_fu_68, ap_block_pp0_stage2, acc_fu_371_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_sig_allocacmp_x_load <= acc_fu_371_p2(62 downto 31);
        else 
            ap_sig_allocacmp_x_load <= x_fu_68;
        end if; 
    end process;


    delay_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, delay_addr_1_reg_428, ap_block_pp0_stage0, zext_ln23_fu_242_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                delay_address0 <= delay_addr_1_reg_428;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                delay_address0 <= zext_ln23_fu_242_p1(5 - 1 downto 0);
            else 
                delay_address0 <= "XXXXX";
            end if;
        else 
            delay_address0 <= "XXXXX";
        end if; 
    end process;


    delay_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, delay_addr_reg_423_pp0_iter1_reg, ap_block_pp0_stage0, zext_ln22_fu_231_p1, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            delay_address1 <= delay_addr_reg_423_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            delay_address1 <= zext_ln22_fu_231_p1(5 - 1 downto 0);
        else 
            delay_address1 <= "XXXXX";
        end if; 
    end process;


    delay_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            delay_ce0 <= ap_const_logic_1;
        else 
            delay_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            delay_ce1 <= ap_const_logic_1;
        else 
            delay_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    delay_we0_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln16_reg_409, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln16_reg_409 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            delay_we0 <= ap_const_logic_1;
        else 
            delay_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_we1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            delay_we1 <= ap_const_logic_1;
        else 
            delay_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_273_p0 <= grp_fu_273_p00(31 - 1 downto 0);
    grp_fu_273_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_1_fu_265_p1),63));
    grp_fu_289_p0 <= grp_fu_289_p00(31 - 1 downto 0);
    grp_fu_289_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln22_1_fu_282_p1),63));
    grp_fu_315_p0 <= grp_fu_315_p00(31 - 1 downto 0);
    grp_fu_315_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln23_1_fu_308_p1),63));
    grp_fu_324_p1 <= sext_ln22_reg_498(32 - 1 downto 0);
    grp_fu_340_p1 <= grp_fu_340_p10(31 - 1 downto 0);
    grp_fu_340_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln21_1_fu_332_p1),63));
    grp_fu_353_p0 <= grp_fu_353_p00(31 - 1 downto 0);
    grp_fu_353_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln25_fu_346_p1),63));
    grp_fu_353_p1 <= sext_ln23_reg_519(32 - 1 downto 0);
    i_cast1_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
    icmp_ln16_fu_198_p2 <= "1" when (unsigned(ap_sig_allocacmp_i_1) < unsigned(ap_const_lv4_B)) else "0";
    newFirst4_fu_367_p2 <= std_logic_vector(unsigned(mul_ln21_reg_560) - unsigned(mul_ln25_reg_565));
    newFirst_fu_362_p2 <= std_logic_vector(unsigned(add_ln23_fu_358_p2) - unsigned(mul_ln24_reg_550));
    or_ln21_fu_209_p2 <= (ap_sig_allocacmp_i_1 or ap_const_lv4_1);
    or_ln23_fu_236_p2 <= (tmp_fu_223_p3 or ap_const_lv5_1);
        sext_ln18_1_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_181),31));

        sext_ln21_1_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_181),31));

        sext_ln22_1_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(NUM_1_1_load_reg_463),31));

        sext_ln22_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(delay_load_reg_458),63));

        sext_ln23_1_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(NUM_1_2_load_reg_473),31));

        sext_ln23_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(delay_load_1_reg_468),63));

        sext_ln25_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(DEN_1_2_load_reg_483),31));

    tmp_fu_223_p3 <= (or_ln21_fu_209_p2 & ap_const_lv1_0);
    zext_ln21_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln21_fu_209_p2),64));
    zext_ln22_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_223_p3),64));
    zext_ln23_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_fu_236_p2),64));
end behav;

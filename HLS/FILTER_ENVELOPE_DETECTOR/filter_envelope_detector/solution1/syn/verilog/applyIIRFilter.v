// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="applyIIRFilter_applyIIRFilter,hls_ip_2022_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.025929,HLS_SYN_LAT=29,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1920,HLS_SYN_LUT=739,HLS_VERSION=2022_2}" *)

module applyIIRFilter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] input_r;
output  [31:0] ap_return;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln16_reg_409;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [3:0] NUM_1_0_address0;
reg    NUM_1_0_ce0;
wire   [22:0] NUM_1_0_q0;
reg   [4:0] delay_address0;
reg    delay_ce0;
reg    delay_we0;
wire   [31:0] delay_q0;
reg   [4:0] delay_address1;
reg    delay_ce1;
reg    delay_we1;
wire   [31:0] delay_q1;
wire   [3:0] NUM_1_1_address0;
reg    NUM_1_1_ce0;
wire   [1:0] NUM_1_1_q0;
wire   [3:0] NUM_1_2_address0;
reg    NUM_1_2_ce0;
wire   [1:0] NUM_1_2_q0;
wire   [3:0] DEN_1_1_address0;
reg    DEN_1_1_ce0;
wire   [31:0] DEN_1_1_q0;
wire   [3:0] DEN_1_2_address0;
reg    DEN_1_2_ce0;
wire   [29:0] DEN_1_2_q0;
reg   [22:0] reg_181;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln16_fu_198_p2;
wire   [63:0] zext_ln21_fu_215_p1;
reg   [63:0] zext_ln21_reg_418;
reg   [4:0] delay_addr_reg_423;
reg   [4:0] delay_addr_reg_423_pp0_iter1_reg;
reg   [4:0] delay_addr_1_reg_428;
reg  signed [31:0] delay_load_reg_458;
reg   [1:0] NUM_1_1_load_reg_463;
reg  signed [31:0] delay_load_1_reg_468;
reg   [1:0] NUM_1_2_load_reg_473;
reg  signed [31:0] DEN_1_1_load_reg_478;
reg   [29:0] DEN_1_2_load_reg_483;
wire  signed [62:0] sext_ln22_fu_279_p1;
reg  signed [62:0] sext_ln22_reg_498;
reg  signed [31:0] y_reg_509;
wire    ap_block_pp0_stage3_11001;
wire   [62:0] grp_fu_289_p2;
reg   [62:0] mul_ln22_reg_514;
wire  signed [62:0] sext_ln23_fu_305_p1;
reg  signed [62:0] sext_ln23_reg_519;
wire   [62:0] grp_fu_315_p2;
reg   [62:0] mul_ln23_reg_545;
wire   [62:0] grp_fu_324_p2;
reg   [62:0] mul_ln24_reg_550;
wire   [62:0] grp_fu_340_p2;
reg   [62:0] mul_ln21_reg_560;
wire   [62:0] grp_fu_353_p2;
reg   [62:0] mul_ln25_reg_565;
wire   [62:0] newFirst_fu_362_p2;
reg   [62:0] newFirst_reg_570;
reg   [31:0] output_reg_575;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] i_cast1_fu_204_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln22_fu_231_p1;
wire   [63:0] zext_ln23_fu_242_p1;
wire    ap_block_pp0_stage1;
reg   [31:0] x_fu_68;
reg  signed [31:0] ap_sig_allocacmp_x_load;
wire    ap_block_pp0_stage2;
wire    ap_loop_init;
wire    ap_block_pp0_stage3;
reg   [3:0] i_fu_72;
wire   [3:0] add_ln16_fu_247_p2;
reg   [3:0] ap_sig_allocacmp_i_1;
wire   [3:0] or_ln21_fu_209_p2;
wire   [4:0] tmp_fu_223_p3;
wire   [4:0] or_ln23_fu_236_p2;
wire  signed [30:0] sext_ln18_1_fu_265_p1;
wire   [30:0] grp_fu_273_p0;
wire  signed [30:0] sext_ln22_1_fu_282_p1;
wire   [30:0] grp_fu_289_p0;
wire   [62:0] grp_fu_273_p2;
wire  signed [30:0] sext_ln23_1_fu_308_p1;
wire   [30:0] grp_fu_315_p0;
wire  signed [31:0] grp_fu_324_p1;
wire  signed [30:0] sext_ln21_1_fu_332_p1;
wire   [30:0] grp_fu_340_p1;
wire  signed [30:0] sext_ln25_fu_346_p1;
wire   [30:0] grp_fu_353_p0;
wire  signed [31:0] grp_fu_353_p1;
wire   [62:0] add_ln23_fu_358_p2;
wire   [62:0] newFirst4_fu_367_p2;
wire   [62:0] acc_fu_371_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [62:0] grp_fu_273_p00;
wire   [62:0] grp_fu_289_p00;
wire   [62:0] grp_fu_315_p00;
wire   [62:0] grp_fu_340_p10;
wire   [62:0] grp_fu_353_p00;
reg    ap_condition_247;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

applyIIRFilter_NUM_1_0_ROM_AUTO_1R #(
    .DataWidth( 23 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
NUM_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(NUM_1_0_address0),
    .ce0(NUM_1_0_ce0),
    .q0(NUM_1_0_q0)
);

applyIIRFilter_delay_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 22 ),
    .AddressWidth( 5 ))
delay_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(delay_address0),
    .ce0(delay_ce0),
    .we0(delay_we0),
    .d0(delay_q1),
    .q0(delay_q0),
    .address1(delay_address1),
    .ce1(delay_ce1),
    .we1(delay_we1),
    .d1(output_reg_575),
    .q1(delay_q1)
);

applyIIRFilter_NUM_1_1_ROM_AUTO_1R #(
    .DataWidth( 2 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
NUM_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(NUM_1_1_address0),
    .ce0(NUM_1_1_ce0),
    .q0(NUM_1_1_q0)
);

applyIIRFilter_NUM_1_1_ROM_AUTO_1R #(
    .DataWidth( 2 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
NUM_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(NUM_1_2_address0),
    .ce0(NUM_1_2_ce0),
    .q0(NUM_1_2_q0)
);

applyIIRFilter_DEN_1_1_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
DEN_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(DEN_1_1_address0),
    .ce0(DEN_1_1_ce0),
    .q0(DEN_1_1_q0)
);

applyIIRFilter_DEN_1_2_ROM_AUTO_1R #(
    .DataWidth( 30 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
DEN_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(DEN_1_2_address0),
    .ce0(DEN_1_2_ce0),
    .q0(DEN_1_2_q0)
);

applyIIRFilter_mul_31ns_32s_63_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_31ns_32s_63_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_273_p0),
    .din1(ap_sig_allocacmp_x_load),
    .ce(1'b1),
    .dout(grp_fu_273_p2)
);

applyIIRFilter_mul_31ns_32s_63_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_31ns_32s_63_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_289_p0),
    .din1(delay_load_reg_458),
    .ce(1'b1),
    .dout(grp_fu_289_p2)
);

applyIIRFilter_mul_31ns_32s_63_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_31ns_32s_63_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_315_p0),
    .din1(delay_load_1_reg_468),
    .ce(1'b1),
    .dout(grp_fu_315_p2)
);

applyIIRFilter_mul_32s_32s_63_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32s_63_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(DEN_1_1_load_reg_478),
    .din1(grp_fu_324_p1),
    .ce(1'b1),
    .dout(grp_fu_324_p2)
);

applyIIRFilter_mul_32s_31ns_63_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 63 ))
mul_32s_31ns_63_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_reg_509),
    .din1(grp_fu_340_p1),
    .ce(1'b1),
    .dout(grp_fu_340_p2)
);

applyIIRFilter_mul_31ns_32s_63_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_31ns_32s_63_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_353_p0),
    .din1(grp_fu_353_p1),
    .ce(1'b1),
    .dout(grp_fu_353_p2)
);

applyIIRFilter_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_247)) begin
        if ((icmp_ln16_fu_198_p2 == 1'd1)) begin
            i_fu_72 <= add_ln16_fu_247_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_72 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_fu_68 <= input_r;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        x_fu_68 <= {{acc_fu_371_p2[62:31]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_409 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        DEN_1_1_load_reg_478 <= DEN_1_1_q0;
        DEN_1_2_load_reg_483 <= DEN_1_2_q0;
        NUM_1_1_load_reg_463 <= NUM_1_1_q0;
        NUM_1_2_load_reg_473 <= NUM_1_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln16_fu_198_p2 == 1'd1))) begin
        delay_addr_1_reg_428[4 : 2] <= zext_ln23_fu_242_p1[4 : 2];
        delay_addr_reg_423[4 : 2] <= zext_ln22_fu_231_p1[4 : 2];
        zext_ln21_reg_418[3 : 1] <= zext_ln21_fu_215_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_addr_reg_423_pp0_iter1_reg[4 : 2] <= delay_addr_reg_423[4 : 2];
        icmp_ln16_reg_409 <= icmp_ln16_fu_198_p2;
        mul_ln23_reg_545 <= grp_fu_315_p2;
        mul_ln24_reg_550 <= grp_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_409 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        delay_load_1_reg_468 <= delay_q0;
        delay_load_reg_458 <= delay_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln21_reg_560 <= grp_fu_340_p2;
        mul_ln25_reg_565 <= grp_fu_353_p2;
        newFirst_reg_570 <= newFirst_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_409 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul_ln22_reg_514 <= grp_fu_289_p2;
        sext_ln23_reg_519 <= sext_ln23_fu_305_p1;
        y_reg_509 <= {{grp_fu_273_p2[62:31]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        output_reg_575 <= {{acc_fu_371_p2[62:31]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln16_reg_409 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln16_reg_409 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_181 <= NUM_1_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_409 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sext_ln22_reg_498 <= sext_ln22_fu_279_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DEN_1_1_ce0 = 1'b1;
    end else begin
        DEN_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DEN_1_2_ce0 = 1'b1;
    end else begin
        DEN_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            NUM_1_0_address0 = zext_ln21_reg_418;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            NUM_1_0_address0 = i_cast1_fu_204_p1;
        end else begin
            NUM_1_0_address0 = 'bx;
        end
    end else begin
        NUM_1_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        NUM_1_0_ce0 = 1'b1;
    end else begin
        NUM_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        NUM_1_1_ce0 = 1'b1;
    end else begin
        NUM_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        NUM_1_2_ce0 = 1'b1;
    end else begin
        NUM_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_reg_409 == 1'd0) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_sig_allocacmp_x_load = {{acc_fu_371_p2[62:31]}};
    end else begin
        ap_sig_allocacmp_x_load = x_fu_68;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            delay_address0 = delay_addr_1_reg_428;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            delay_address0 = zext_ln23_fu_242_p1;
        end else begin
            delay_address0 = 'bx;
        end
    end else begin
        delay_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        delay_address1 = delay_addr_reg_423_pp0_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delay_address1 = zext_ln22_fu_231_p1;
    end else begin
        delay_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        delay_ce0 = 1'b1;
    end else begin
        delay_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        delay_ce1 = 1'b1;
    end else begin
        delay_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_reg_409 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        delay_we0 = 1'b1;
    end else begin
        delay_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        delay_we1 = 1'b1;
    end else begin
        delay_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DEN_1_1_address0 = zext_ln21_fu_215_p1;

assign DEN_1_2_address0 = zext_ln21_fu_215_p1;

assign NUM_1_1_address0 = zext_ln21_fu_215_p1;

assign NUM_1_2_address0 = zext_ln21_fu_215_p1;

assign acc_fu_371_p2 = (newFirst_reg_570 + newFirst4_fu_367_p2);

assign add_ln16_fu_247_p2 = (ap_sig_allocacmp_i_1 + 4'd2);

assign add_ln23_fu_358_p2 = (mul_ln22_reg_514 + mul_ln23_reg_545);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_247 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign ap_return = x_fu_68;

assign grp_fu_273_p0 = grp_fu_273_p00;

assign grp_fu_273_p00 = $unsigned(sext_ln18_1_fu_265_p1);

assign grp_fu_289_p0 = grp_fu_289_p00;

assign grp_fu_289_p00 = $unsigned(sext_ln22_1_fu_282_p1);

assign grp_fu_315_p0 = grp_fu_315_p00;

assign grp_fu_315_p00 = $unsigned(sext_ln23_1_fu_308_p1);

assign grp_fu_324_p1 = sext_ln22_reg_498;

assign grp_fu_340_p1 = grp_fu_340_p10;

assign grp_fu_340_p10 = $unsigned(sext_ln21_1_fu_332_p1);

assign grp_fu_353_p0 = grp_fu_353_p00;

assign grp_fu_353_p00 = $unsigned(sext_ln25_fu_346_p1);

assign grp_fu_353_p1 = sext_ln23_reg_519;

assign i_cast1_fu_204_p1 = ap_sig_allocacmp_i_1;

assign icmp_ln16_fu_198_p2 = ((ap_sig_allocacmp_i_1 < 4'd11) ? 1'b1 : 1'b0);

assign newFirst4_fu_367_p2 = (mul_ln21_reg_560 - mul_ln25_reg_565);

assign newFirst_fu_362_p2 = (add_ln23_fu_358_p2 - mul_ln24_reg_550);

assign or_ln21_fu_209_p2 = (ap_sig_allocacmp_i_1 | 4'd1);

assign or_ln23_fu_236_p2 = (tmp_fu_223_p3 | 5'd1);

assign sext_ln18_1_fu_265_p1 = $signed(reg_181);

assign sext_ln21_1_fu_332_p1 = $signed(reg_181);

assign sext_ln22_1_fu_282_p1 = $signed(NUM_1_1_load_reg_463);

assign sext_ln22_fu_279_p1 = delay_load_reg_458;

assign sext_ln23_1_fu_308_p1 = $signed(NUM_1_2_load_reg_473);

assign sext_ln23_fu_305_p1 = delay_load_1_reg_468;

assign sext_ln25_fu_346_p1 = $signed(DEN_1_2_load_reg_483);

assign tmp_fu_223_p3 = {{or_ln21_fu_209_p2}, {1'd0}};

assign zext_ln21_fu_215_p1 = or_ln21_fu_209_p2;

assign zext_ln22_fu_231_p1 = tmp_fu_223_p3;

assign zext_ln23_fu_242_p1 = or_ln23_fu_236_p2;

always @ (posedge ap_clk) begin
    zext_ln21_reg_418[0] <= 1'b1;
    zext_ln21_reg_418[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    delay_addr_reg_423[1:0] <= 2'b10;
    delay_addr_reg_423_pp0_iter1_reg[1:0] <= 2'b10;
    delay_addr_1_reg_428[1:0] <= 2'b11;
end

endmodule //applyIIRFilter

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="filter1_filter1,hls_ip_2022_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.860000,HLS_SYN_LAT=12,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1750,HLS_SYN_LUT=1366,HLS_VERSION=2022_2}" *)

module filter1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r,
        ap_return
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] input_r;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] filter_state_w1_2;
reg  signed [31:0] filter_state_w2_2;
reg   [31:0] filter_state_w1_1;
reg  signed [31:0] filter_state_w2_1;
reg   [31:0] filter_state_w1;
reg  signed [31:0] filter_state_w2;
reg  signed [31:0] filter_state_w2_2_load_reg_549;
reg   [24:0] x_1_reg_559;
wire    ap_CS_fsm_state2;
reg   [31:0] trunc_ln_reg_564;
reg   [31:0] trunc_ln39_1_reg_569;
wire  signed [31:0] w_fu_150_p2;
reg  signed [31:0] w_reg_574;
wire    ap_CS_fsm_state3;
wire   [31:0] y_fu_210_p2;
reg  signed [31:0] y_reg_580;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg  signed [31:0] filter_state_w2_1_load_reg_590;
reg   [24:0] x_3_reg_600;
wire    ap_CS_fsm_state6;
reg   [31:0] trunc_ln39_5_reg_605;
reg   [31:0] trunc_ln39_6_reg_610;
wire  signed [31:0] w_1_fu_301_p2;
reg  signed [31:0] w_1_reg_615;
wire    ap_CS_fsm_state7;
wire   [31:0] y_1_fu_361_p2;
reg  signed [31:0] y_1_reg_621;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg  signed [31:0] filter_state_w2_load_reg_631;
reg   [24:0] x_5_reg_641;
wire    ap_CS_fsm_state10;
reg   [31:0] trunc_ln39_s_reg_646;
reg   [31:0] trunc_ln39_4_reg_651;
wire  signed [31:0] w_2_fu_452_p2;
reg  signed [31:0] w_2_reg_656;
wire    ap_CS_fsm_state11;
wire  signed [31:0] y_2_fu_512_p2;
reg  signed [31:0] y_2_reg_662;
wire    ap_CS_fsm_state12;
wire   [24:0] grp_fu_68_p1;
wire   [31:0] grp_fu_82_p1;
wire   [55:0] grp_fu_68_p2;
wire   [62:0] shl_ln_fu_102_p3;
wire   [62:0] temp_1_fu_110_p2;
wire   [62:0] grp_fu_82_p2;
wire  signed [31:0] sext_ln39_fu_142_p1;
wire   [31:0] sub_ln53_fu_145_p2;
wire   [62:0] shl_ln38_1_fu_164_p3;
wire  signed [62:0] sext_ln38_2_fu_161_p1;
wire   [62:0] temp_3_fu_171_p2;
wire   [62:0] shl_ln38_2_fu_187_p3;
wire   [62:0] temp_4_fu_194_p2;
wire   [31:0] trunc_ln39_2_fu_177_p4;
wire   [31:0] trunc_ln39_3_fu_200_p4;
wire   [24:0] grp_fu_219_p1;
wire   [31:0] grp_fu_233_p1;
wire   [55:0] grp_fu_219_p2;
wire   [62:0] shl_ln38_3_fu_253_p3;
wire   [62:0] temp_6_fu_261_p2;
wire   [62:0] grp_fu_233_p2;
wire  signed [31:0] sext_ln39_1_fu_293_p1;
wire   [31:0] sub_ln53_1_fu_296_p2;
wire   [62:0] shl_ln38_4_fu_315_p3;
wire  signed [62:0] sext_ln38_5_fu_312_p1;
wire   [62:0] temp_8_fu_322_p2;
wire   [62:0] shl_ln38_5_fu_338_p3;
wire   [62:0] temp_9_fu_345_p2;
wire   [31:0] trunc_ln39_7_fu_328_p4;
wire   [31:0] trunc_ln39_8_fu_351_p4;
wire   [24:0] grp_fu_370_p1;
wire   [31:0] grp_fu_384_p1;
wire   [55:0] grp_fu_370_p2;
wire   [62:0] shl_ln38_6_fu_404_p3;
wire   [62:0] temp_11_fu_412_p2;
wire   [62:0] grp_fu_384_p2;
wire  signed [31:0] sext_ln39_2_fu_444_p1;
wire   [31:0] sub_ln53_2_fu_447_p2;
wire   [62:0] shl_ln38_7_fu_466_p3;
wire  signed [62:0] sext_ln38_8_fu_463_p1;
wire   [62:0] temp_13_fu_473_p2;
wire   [62:0] shl_ln38_8_fu_489_p3;
wire   [62:0] temp_14_fu_496_p2;
wire   [31:0] trunc_ln39_9_fu_479_p4;
wire   [31:0] trunc_ln39_10_fu_502_p4;
wire    ap_CS_fsm_state13;
wire   [62:0] shl_ln38_9_fu_521_p3;
wire  signed [62:0] sext_ln38_9_fu_518_p1;
wire   [62:0] temp_15_fu_528_p2;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 filter_state_w1_2 = 32'd0;
#0 filter_state_w2_2 = 32'd0;
#0 filter_state_w1_1 = 32'd0;
#0 filter_state_w2_1 = 32'd0;
#0 filter_state_w1 = 32'd0;
#0 filter_state_w2 = 32'd0;
end

filter1_mul_32s_25ns_56_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 56 ))
mul_32s_25ns_56_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_r),
    .din1(grp_fu_68_p1),
    .ce(1'b1),
    .dout(grp_fu_68_p2)
);

filter1_mul_32s_32ns_63_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32ns_63_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(filter_state_w2_2),
    .din1(grp_fu_82_p1),
    .ce(1'b1),
    .dout(grp_fu_82_p2)
);

filter1_mul_32s_25ns_56_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 56 ))
mul_32s_25ns_56_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_reg_580),
    .din1(grp_fu_219_p1),
    .ce(1'b1),
    .dout(grp_fu_219_p2)
);

filter1_mul_32s_32ns_63_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32ns_63_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(filter_state_w2_1),
    .din1(grp_fu_233_p1),
    .ce(1'b1),
    .dout(grp_fu_233_p2)
);

filter1_mul_32s_25ns_56_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 56 ))
mul_32s_25ns_56_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(y_1_reg_621),
    .din1(grp_fu_370_p1),
    .ce(1'b1),
    .dout(grp_fu_370_p2)
);

filter1_mul_32s_32ns_63_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_32s_32ns_63_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(filter_state_w2),
    .din1(grp_fu_384_p1),
    .ce(1'b1),
    .dout(grp_fu_384_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        filter_state_w1 <= w_2_fu_452_p2;
        w_2_reg_656 <= w_2_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        filter_state_w1_1 <= w_1_fu_301_p2;
        w_1_reg_615 <= w_1_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        filter_state_w1_2 <= w_fu_150_p2;
        w_reg_574 <= w_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        filter_state_w2 <= filter_state_w1;
        trunc_ln39_4_reg_651 <= {{grp_fu_384_p2[62:31]}};
        trunc_ln39_s_reg_646 <= {{temp_11_fu_412_p2[62:31]}};
        x_5_reg_641 <= {{grp_fu_370_p2[55:31]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        filter_state_w2_1 <= filter_state_w1_1;
        trunc_ln39_5_reg_605 <= {{temp_6_fu_261_p2[62:31]}};
        trunc_ln39_6_reg_610 <= {{grp_fu_233_p2[62:31]}};
        x_3_reg_600 <= {{grp_fu_219_p2[55:31]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        filter_state_w2_1_load_reg_590 <= filter_state_w2_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        filter_state_w2_2 <= filter_state_w1_2;
        trunc_ln39_1_reg_569 <= {{grp_fu_82_p2[62:31]}};
        trunc_ln_reg_564 <= {{temp_1_fu_110_p2[62:31]}};
        x_1_reg_559 <= {{grp_fu_68_p2[55:31]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        filter_state_w2_2_load_reg_549 <= filter_state_w2_2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        filter_state_w2_load_reg_631 <= filter_state_w2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        y_1_reg_621 <= y_1_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        y_2_reg_662 <= y_2_fu_512_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        y_reg_580 <= y_fu_210_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = {{temp_15_fu_528_p2[62:31]}};

assign grp_fu_219_p1 = 56'd9117545;

assign grp_fu_233_p1 = 63'd2138720858;

assign grp_fu_370_p1 = 56'd9098292;

assign grp_fu_384_p1 = 63'd2129287064;

assign grp_fu_68_p1 = 56'd9117545;

assign grp_fu_82_p1 = 63'd2138011531;

assign sext_ln38_2_fu_161_p1 = w_reg_574;

assign sext_ln38_5_fu_312_p1 = w_1_reg_615;

assign sext_ln38_8_fu_463_p1 = w_2_reg_656;

assign sext_ln38_9_fu_518_p1 = y_2_reg_662;

assign sext_ln39_1_fu_293_p1 = $signed(x_3_reg_600);

assign sext_ln39_2_fu_444_p1 = $signed(x_5_reg_641);

assign sext_ln39_fu_142_p1 = $signed(x_1_reg_559);

assign shl_ln38_1_fu_164_p3 = {{w_reg_574}, {31'd0}};

assign shl_ln38_2_fu_187_p3 = {{filter_state_w2_2_load_reg_549}, {31'd0}};

assign shl_ln38_3_fu_253_p3 = {{filter_state_w1_1}, {31'd0}};

assign shl_ln38_4_fu_315_p3 = {{w_1_reg_615}, {31'd0}};

assign shl_ln38_5_fu_338_p3 = {{filter_state_w2_1_load_reg_590}, {31'd0}};

assign shl_ln38_6_fu_404_p3 = {{filter_state_w1}, {31'd0}};

assign shl_ln38_7_fu_466_p3 = {{w_2_reg_656}, {31'd0}};

assign shl_ln38_8_fu_489_p3 = {{filter_state_w2_load_reg_631}, {31'd0}};

assign shl_ln38_9_fu_521_p3 = {{y_2_reg_662}, {31'd0}};

assign shl_ln_fu_102_p3 = {{filter_state_w1_2}, {31'd0}};

assign sub_ln53_1_fu_296_p2 = ($signed(sext_ln39_1_fu_293_p1) - $signed(trunc_ln39_5_reg_605));

assign sub_ln53_2_fu_447_p2 = ($signed(sext_ln39_2_fu_444_p1) - $signed(trunc_ln39_s_reg_646));

assign sub_ln53_fu_145_p2 = ($signed(sext_ln39_fu_142_p1) - $signed(trunc_ln_reg_564));

assign temp_11_fu_412_p2 = (63'd0 - shl_ln38_6_fu_404_p3);

assign temp_13_fu_473_p2 = ($signed(shl_ln38_7_fu_466_p3) - $signed(sext_ln38_8_fu_463_p1));

assign temp_14_fu_496_p2 = (63'd0 - shl_ln38_8_fu_489_p3);

assign temp_15_fu_528_p2 = ($signed(shl_ln38_9_fu_521_p3) - $signed(sext_ln38_9_fu_518_p1));

assign temp_1_fu_110_p2 = (63'd0 - shl_ln_fu_102_p3);

assign temp_3_fu_171_p2 = ($signed(shl_ln38_1_fu_164_p3) - $signed(sext_ln38_2_fu_161_p1));

assign temp_4_fu_194_p2 = (63'd0 - shl_ln38_2_fu_187_p3);

assign temp_6_fu_261_p2 = (63'd0 - shl_ln38_3_fu_253_p3);

assign temp_8_fu_322_p2 = ($signed(shl_ln38_4_fu_315_p3) - $signed(sext_ln38_5_fu_312_p1));

assign temp_9_fu_345_p2 = (63'd0 - shl_ln38_5_fu_338_p3);

assign trunc_ln39_10_fu_502_p4 = {{temp_14_fu_496_p2[62:31]}};

assign trunc_ln39_2_fu_177_p4 = {{temp_3_fu_171_p2[62:31]}};

assign trunc_ln39_3_fu_200_p4 = {{temp_4_fu_194_p2[62:31]}};

assign trunc_ln39_7_fu_328_p4 = {{temp_8_fu_322_p2[62:31]}};

assign trunc_ln39_8_fu_351_p4 = {{temp_9_fu_345_p2[62:31]}};

assign trunc_ln39_9_fu_479_p4 = {{temp_13_fu_473_p2[62:31]}};

assign w_1_fu_301_p2 = (sub_ln53_1_fu_296_p2 - trunc_ln39_6_reg_610);

assign w_2_fu_452_p2 = (sub_ln53_2_fu_447_p2 - trunc_ln39_4_reg_651);

assign w_fu_150_p2 = (sub_ln53_fu_145_p2 - trunc_ln39_1_reg_569);

assign y_1_fu_361_p2 = (trunc_ln39_7_fu_328_p4 + trunc_ln39_8_fu_351_p4);

assign y_2_fu_512_p2 = (trunc_ln39_9_fu_479_p4 + trunc_ln39_10_fu_502_p4);

assign y_fu_210_p2 = (trunc_ln39_2_fu_177_p4 + trunc_ln39_3_fu_200_p4);

endmodule //filter1

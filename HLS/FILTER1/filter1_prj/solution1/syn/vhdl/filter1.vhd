-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filter1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of filter1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "filter1_filter1,hls_ip_2022_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.860000,HLS_SYN_LAT=12,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1750,HLS_SYN_LUT=1366,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv56_8B1F69 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000100010110001111101101001";
    constant ap_const_lv63_7F6F778B : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000001111111011011110111011110001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_7F7A4A5A : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000001111111011110100100101001011010";
    constant ap_const_lv56_8AD434 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000100010101101010000110100";
    constant ap_const_lv63_7EEA5798 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000001111110111010100101011110011000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal filter_state_w1_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal filter_state_w2_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal filter_state_w1_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal filter_state_w2_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal filter_state_w1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal filter_state_w2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal filter_state_w2_2_load_reg_549 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_reg_559 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln39_1_reg_569 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_fu_150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_reg_574 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal y_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal filter_state_w2_1_load_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_3_reg_600 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln39_5_reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln39_6_reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_1_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_1_reg_615 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal y_1_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal filter_state_w2_load_reg_631 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_5_reg_641 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln39_s_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln39_4_reg_651 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_2_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_2_reg_656 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal y_2_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_2_reg_662 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_68_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_82_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_68_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal shl_ln_fu_102_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal temp_1_fu_110_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_82_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln39_fu_142_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln53_fu_145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_1_fu_164_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln38_2_fu_161_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal temp_3_fu_171_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln38_2_fu_187_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal temp_4_fu_194_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln39_2_fu_177_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln39_3_fu_200_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal shl_ln38_3_fu_253_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal temp_6_fu_261_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln39_1_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln53_1_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_4_fu_315_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln38_5_fu_312_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal temp_8_fu_322_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln38_5_fu_338_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal temp_9_fu_345_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln39_7_fu_328_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln39_8_fu_351_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_370_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_370_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal shl_ln38_6_fu_404_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal temp_11_fu_412_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_384_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln39_2_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln53_2_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln38_7_fu_466_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln38_8_fu_463_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal temp_13_fu_473_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln38_8_fu_489_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal temp_14_fu_496_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln39_9_fu_479_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln39_10_fu_502_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal shl_ln38_9_fu_521_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln38_9_fu_518_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal temp_15_fu_528_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component filter1_mul_32s_25ns_56_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component filter1_mul_32s_32ns_63_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;



begin
    mul_32s_25ns_56_2_1_U1 : component filter1_mul_32s_25ns_56_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 25,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_r,
        din1 => grp_fu_68_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_68_p2);

    mul_32s_32ns_63_2_1_U2 : component filter1_mul_32s_32ns_63_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filter_state_w2_2,
        din1 => grp_fu_82_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_82_p2);

    mul_32s_25ns_56_2_1_U3 : component filter1_mul_32s_25ns_56_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 25,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_reg_580,
        din1 => grp_fu_219_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_219_p2);

    mul_32s_32ns_63_2_1_U4 : component filter1_mul_32s_32ns_63_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filter_state_w2_1,
        din1 => grp_fu_233_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_233_p2);

    mul_32s_25ns_56_2_1_U5 : component filter1_mul_32s_25ns_56_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 25,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => y_1_reg_621,
        din1 => grp_fu_370_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_370_p2);

    mul_32s_32ns_63_2_1_U6 : component filter1_mul_32s_32ns_63_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => filter_state_w2,
        din1 => grp_fu_384_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_384_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                filter_state_w1 <= w_2_fu_452_p2;
                w_2_reg_656 <= w_2_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                filter_state_w1_1 <= w_1_fu_301_p2;
                w_1_reg_615 <= w_1_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                filter_state_w1_2 <= w_fu_150_p2;
                w_reg_574 <= w_fu_150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                filter_state_w2 <= filter_state_w1;
                trunc_ln39_4_reg_651 <= grp_fu_384_p2(62 downto 31);
                trunc_ln39_s_reg_646 <= temp_11_fu_412_p2(62 downto 31);
                x_5_reg_641 <= grp_fu_370_p2(55 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                filter_state_w2_1 <= filter_state_w1_1;
                trunc_ln39_5_reg_605 <= temp_6_fu_261_p2(62 downto 31);
                trunc_ln39_6_reg_610 <= grp_fu_233_p2(62 downto 31);
                x_3_reg_600 <= grp_fu_219_p2(55 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                filter_state_w2_1_load_reg_590 <= filter_state_w2_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                filter_state_w2_2 <= filter_state_w1_2;
                trunc_ln39_1_reg_569 <= grp_fu_82_p2(62 downto 31);
                trunc_ln_reg_564 <= temp_1_fu_110_p2(62 downto 31);
                x_1_reg_559 <= grp_fu_68_p2(55 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                filter_state_w2_2_load_reg_549 <= filter_state_w2_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                filter_state_w2_load_reg_631 <= filter_state_w2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                y_1_reg_621 <= y_1_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                y_2_reg_662 <= y_2_fu_512_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                y_reg_580 <= y_fu_210_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= temp_15_fu_528_p2(62 downto 31);
    grp_fu_219_p1 <= ap_const_lv56_8B1F69(25 - 1 downto 0);
    grp_fu_233_p1 <= ap_const_lv63_7F7A4A5A(32 - 1 downto 0);
    grp_fu_370_p1 <= ap_const_lv56_8AD434(25 - 1 downto 0);
    grp_fu_384_p1 <= ap_const_lv63_7EEA5798(32 - 1 downto 0);
    grp_fu_68_p1 <= ap_const_lv56_8B1F69(25 - 1 downto 0);
    grp_fu_82_p1 <= ap_const_lv63_7F6F778B(32 - 1 downto 0);
        sext_ln38_2_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_reg_574),63));

        sext_ln38_5_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_1_reg_615),63));

        sext_ln38_8_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_2_reg_656),63));

        sext_ln38_9_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_2_reg_662),63));

        sext_ln39_1_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_3_reg_600),32));

        sext_ln39_2_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_5_reg_641),32));

        sext_ln39_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_1_reg_559),32));

    shl_ln38_1_fu_164_p3 <= (w_reg_574 & ap_const_lv31_0);
    shl_ln38_2_fu_187_p3 <= (filter_state_w2_2_load_reg_549 & ap_const_lv31_0);
    shl_ln38_3_fu_253_p3 <= (filter_state_w1_1 & ap_const_lv31_0);
    shl_ln38_4_fu_315_p3 <= (w_1_reg_615 & ap_const_lv31_0);
    shl_ln38_5_fu_338_p3 <= (filter_state_w2_1_load_reg_590 & ap_const_lv31_0);
    shl_ln38_6_fu_404_p3 <= (filter_state_w1 & ap_const_lv31_0);
    shl_ln38_7_fu_466_p3 <= (w_2_reg_656 & ap_const_lv31_0);
    shl_ln38_8_fu_489_p3 <= (filter_state_w2_load_reg_631 & ap_const_lv31_0);
    shl_ln38_9_fu_521_p3 <= (y_2_reg_662 & ap_const_lv31_0);
    shl_ln_fu_102_p3 <= (filter_state_w1_2 & ap_const_lv31_0);
    sub_ln53_1_fu_296_p2 <= std_logic_vector(signed(sext_ln39_1_fu_293_p1) - signed(trunc_ln39_5_reg_605));
    sub_ln53_2_fu_447_p2 <= std_logic_vector(signed(sext_ln39_2_fu_444_p1) - signed(trunc_ln39_s_reg_646));
    sub_ln53_fu_145_p2 <= std_logic_vector(signed(sext_ln39_fu_142_p1) - signed(trunc_ln_reg_564));
    temp_11_fu_412_p2 <= std_logic_vector(unsigned(ap_const_lv63_0) - unsigned(shl_ln38_6_fu_404_p3));
    temp_13_fu_473_p2 <= std_logic_vector(unsigned(shl_ln38_7_fu_466_p3) - unsigned(sext_ln38_8_fu_463_p1));
    temp_14_fu_496_p2 <= std_logic_vector(unsigned(ap_const_lv63_0) - unsigned(shl_ln38_8_fu_489_p3));
    temp_15_fu_528_p2 <= std_logic_vector(unsigned(shl_ln38_9_fu_521_p3) - unsigned(sext_ln38_9_fu_518_p1));
    temp_1_fu_110_p2 <= std_logic_vector(unsigned(ap_const_lv63_0) - unsigned(shl_ln_fu_102_p3));
    temp_3_fu_171_p2 <= std_logic_vector(unsigned(shl_ln38_1_fu_164_p3) - unsigned(sext_ln38_2_fu_161_p1));
    temp_4_fu_194_p2 <= std_logic_vector(unsigned(ap_const_lv63_0) - unsigned(shl_ln38_2_fu_187_p3));
    temp_6_fu_261_p2 <= std_logic_vector(unsigned(ap_const_lv63_0) - unsigned(shl_ln38_3_fu_253_p3));
    temp_8_fu_322_p2 <= std_logic_vector(unsigned(shl_ln38_4_fu_315_p3) - unsigned(sext_ln38_5_fu_312_p1));
    temp_9_fu_345_p2 <= std_logic_vector(unsigned(ap_const_lv63_0) - unsigned(shl_ln38_5_fu_338_p3));
    trunc_ln39_10_fu_502_p4 <= temp_14_fu_496_p2(62 downto 31);
    trunc_ln39_2_fu_177_p4 <= temp_3_fu_171_p2(62 downto 31);
    trunc_ln39_3_fu_200_p4 <= temp_4_fu_194_p2(62 downto 31);
    trunc_ln39_7_fu_328_p4 <= temp_8_fu_322_p2(62 downto 31);
    trunc_ln39_8_fu_351_p4 <= temp_9_fu_345_p2(62 downto 31);
    trunc_ln39_9_fu_479_p4 <= temp_13_fu_473_p2(62 downto 31);
    w_1_fu_301_p2 <= std_logic_vector(unsigned(sub_ln53_1_fu_296_p2) - unsigned(trunc_ln39_6_reg_610));
    w_2_fu_452_p2 <= std_logic_vector(unsigned(sub_ln53_2_fu_447_p2) - unsigned(trunc_ln39_4_reg_651));
    w_fu_150_p2 <= std_logic_vector(unsigned(sub_ln53_fu_145_p2) - unsigned(trunc_ln39_1_reg_569));
    y_1_fu_361_p2 <= std_logic_vector(unsigned(trunc_ln39_7_fu_328_p4) + unsigned(trunc_ln39_8_fu_351_p4));
    y_2_fu_512_p2 <= std_logic_vector(unsigned(trunc_ln39_9_fu_479_p4) + unsigned(trunc_ln39_10_fu_502_p4));
    y_fu_210_p2 <= std_logic_vector(unsigned(trunc_ln39_2_fu_177_p4) + unsigned(trunc_ln39_3_fu_200_p4));
end behav;
